<!DOCTYPE html>































<html class="hasSidebar hasPageActions hasBreadcrumb conceptual" lang="en-us" dir="ltr" data-authenticated="false" data-auth-status-determined="false" data-target="docs" x-ms-format-detection="none">

<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<meta property="og:title" content="Async in depth" />
	<meta property="og:type" content="website" />
	<meta property="og:url" content="https://docs.microsoft.com/en-us/dotnet/standard/async-in-depth" />
	<meta property="og:description" content="Learn how writing I&#x2FO-bound and CPU-bound asynchronous code is straightforward using the .NET Task-based async model." />
	<meta property="og:image" content="https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png" />
	<meta property="og:image:alt" content="Microsoft Logo" />

	<meta name="twitter:card" content="summary" />
	<meta name="twitter:site" content="@docsmsft" />

		<meta name="ms.devlang" content="dotnet" />
<meta name="author" content="cartermp" />
<meta name="ms.author" content="wiwagn" />
<meta name="breadcrumb_path" content="/dotnet/breadcrumb/toc.json" />
<meta name="apiPlatform" content="dotnet" />
<meta name="ms.topic" content="conceptual" />
<meta name="ms.prod" content="dotnet" />
<meta name="uhfHeaderId" content="MSDocsHeader-DotNet" />
<meta name="ms.assetid" content="1e38f9d9-8f84-46ee-a15f-199aec4f2e34" />
<meta name="description" content="Learn how writing I&amp;#x2FO-bound and CPU-bound asynchronous code is straightforward using the .NET Task-based async model." />
<meta name="ms.date" content="06/20/2016" />
<meta name="ms.technology" content="dotnet-standard" />
<meta name="search.ms_sitename" content="Docs" />
<meta name="search.ms_docsetname" content="core-docs" />
<meta name="locale" content="en-us" />
<meta name="site_name" content="Docs" />
<meta name="search.ms_product" content="VS" />
<meta name="depot_name" content="VS.core-docs" />
<meta name="updated_at" content="2019-03-15 12:01 PM" />
<meta name="gitcommit" content="https://github.com/dotnet/docs/blob/769f78acacacba93a691293d64aa630625b7d1ee/docs/standard/async-in-depth.md" />
<meta name="original_content_git_url" content="https://github.com/dotnet/docs/blob/live/docs/standard/async-in-depth.md" />
<meta name="document_id" content="88cc5f21-0b4b-f33c-b7fc-96bb9c95ddcf" />
<meta name="document_version_independent_id" content="46697309-d4fd-1cd9-f8ff-e4577be08003" />
<meta name="page_type" content="conceptual" />
<meta name="toc_rel" content="../toc.json" />
<meta name="pdf_url_template" content="https://docs.microsoft.com/pdfstore/en-us/VS.core-docs/{branchName}{pdfName}" />
<meta name="search.mshattr.devlang" content="csharp" />
<meta name="word_count" content="1924" />

	<meta name="scope" content=".NET" />
<link href="https://docs.microsoft.com/en-us/dotnet/standard/async-in-depth" rel="canonical">
	<title>Async in depth | Microsoft Docs</title>

		<link rel="stylesheet" href="/_themes/docs.theme/master/en-us/_themes/styles/6e59f4a9.site-ltr.css ">

	<link rel="stylesheet" href="/_themes/docs.theme/master/en-us/_themes/styles/f1e7d9d9.conceptual.css ">


	<script>
	var msDocs = {
		data: {
			timeOrigin: Date.now(),
			azureHeaderLocale: 'en-us',
			contentLocale: 'en-us',
			contentDir: 'ltr',
			userLocale: 'en-us',
			userDir: 'ltr',
			pageTemplate: 'Conceptual',
			brand: '',
			context: {

			},
			hasComments: true,
			feedbackSystem: 'GitHub',
			feedbackGitHubRepo: 'dotnet/docs',
			feedbackProductUrl: 'https://developercommunity.visualstudio.com/spaces/61/index.html',
			contentGitUrl: 'https://github.com/dotnet/docs/blob/master/docs/standard/async-in-depth.md',
		},
		functions:{},
		settings:{
			extendBreadcrumb: false,
			enableUHFPPE: true
		}
	};
	if (!('Promise' in window && 'resolve' in window.Promise && 'reject' in window.Promise && 'all' in window.Promise && 'race' in window.Promise)) {
		document.write('<script src="https://static.docs.com/ui/third-party/bluebird/3.5.0/bluebird.min.js" integrity="sha384-aD4BDeDGeLXLpPK4yKeqtZQa9dv4a/7mQ+4L5vwshIYH1Mc2BrXvHd32iHzYCQy5" crossorigin="anonymous"><\/script>');
	}
	if (typeof fetch !== 'function') {
		document.write('<script src="https://static.docs.com/ui/third-party/fetch/2.0.3/fetch.min.js" integrity="sha384-H3LQq82b6Mm80GYRHtRSlTwO9DoXctmYCVEYk9M8mp97lRzs6DuSrHVUg3SBP9w0" crossorigin="anonymous"><\/script>');
	}
	if (typeof HTMLTemplateElement === 'undefined') {
		document.write('<script src="https://static.docs.com/ui/third-party/template/1.4.0/template.min.js" integrity="sha384-1zKzI6ldTVHMU7n0W2HpE/lhHI+UG4D9IIaxbj3kT2UhCWicdTuJkTtnKuu0CQzN" crossorigin="anonymous"><\/script>');
	}
	</script>

	<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.3.1.min.js" integrity="sha384-tsQFqpEReu7ZLhBV2VZlAu7zcOV+rXbYlF2cqB8txI/8aZajjp4Bqd+V6D5IgvKT" crossorigin="anonymous"></script>
		<script src="/_themes/docs.theme/master/en-us/_themes/scripts/abb4a760.index-docs.js"></script>

</head>

<body lang="en-us" dir="ltr">
<div class="header-holder">
		<div id="headerAreaHolder" data-bi-name="header">
			<div id="uhf-placeholder"></div>
		</div>
	<div class="content-header uhf-container has-padding has-default-focus" data-bi-name="content-header">
		<nav class="has-padding-none-mobile" data-bi-name="breadcrumb" itemscope itemtype="http://schema.org/BreadcrumbList" role="navigation" aria-label="Breadcrumb">
		<ul id="page-breadcrumbs" class="breadcrumbs">
		</ul>
		</nav>
		<div class="content-header-controls exit-focus">
			<button type="button" class="ap-collapse-behavior ap-expanded button" data-bi-name="ap-collapse" aria-controls="action-panel">
				<span class="icon"><span class="docon docon-exit-mode"></span></span>
				<span>Exit focus mode</span>
			</button>
			
		</div>
		<div class="content-header-controls">
			<button type="button" class="contents-button button" data-bi-name="contents-expand" aria-controls="sidebar" aria-haspopup="true">
				<span class="icon"><span class="docon docon-menu" aria-hidden="true"></span></span>
				<span>Contents</span>
			</button>
		</div>
		<div class="action-bar">
			<ul class="action-list">
						<li>
							<a href="#feedback" class="button is-text is-size-7 is-icon-only-touch" data-bi-name="comments">
								<span class="icon">
									<span class="docon docon-comment-lines" aria-hidden="true"></span>
								</span>
								<span class="action-item-text">Feedback</span>
							</a>
						</li>
							<li id="contenteditbtn">
									<a href="https://github.com/dotnet/docs/blob/master/docs/standard/async-in-depth.md" class="button is-text is-icon-only-touch is-size-7" title="Edit This Document" data-bi-name="edit" data-original_content_git_url="https://github.com/dotnet/docs/blob/live/docs/standard/async-in-depth.md" data-original_content_git_url_template="" data-pr_repo="" data-pr_branch="">
									<span class="icon">
										<span class="docon docon-edit-outline" aria-hidden="true"></span>
									</span>
									<span class="action-item-text">Edit</span>
								</a>
							</li>
				<li>
					<div class="sharing dropdown has-caret" auto-align>
						<a href="#" class="dropdown-trigger button is-text is-size-7 is-icon-only-touch" aria-haspopup="true" aria-controls="sharing-menu" aria-expanded="false" title="Share This Document" data-bi-name="share">
							<span class="icon">
								<span class="docon docon-sharing" aria-hidden="true"></span>
							</span>
							<span class="action-item-text">Share</span>
						</a>
						<div class="dropdown-menu" id="sharing-menu" role="menu">
							<ul data-bi-name="share-links">
								<li><a class="share-twitter" data-bi-name="twitter">
									<span class="icon">
										<span class="docon docon-brand-twitter" aria-hidden="true"></span>
									</span>
									<span>Twitter</span></a></li>
								<li><a class="share-linkedin" data-bi-name="linkedin">
									<span class="icon">
										<span class="docon docon-brand-linkedin" aria-hidden="true"></span>
									</span>
									<span>LinkedIn</span></a></li>
								<li><a class="share-facebook" data-bi-name="facebook">
									<span class="icon">
										<span class="docon docon-brand-facebook" aria-hidden="true"></span>
									</span>
									<span>Facebook</span></a></li>
								<li><a class="share-email" data-bi-name="email">
									<span class="icon">
										<span class="docon docon-mail-message-fill" aria-hidden="true"></span>
									</span>
									<span>Email</span></a></li>
							</ul>
						</div>
					</div>
				</li>
				<li>
					<button class="toggle-theme button is-text is-size-7 is-icon-only-touch" aria-label="toggle-theme" data-bi-name="select-theme">
						<span class="icon">
							<span class="docon docon-sun"></span>
						</span>
						<span class="action-item-text">Theme</span>
					</button>
				</li>
				<li class="is-unstyled-action-list-item">
					<a class="docs-sign-in auth-status-determined not-authenticated button is-text has-text-primary is-size-7" href="#">Sign in</a>
					<div class="dropdown has-caret auth-status-determined authenticated" auto-align>
						<button class="dropdown-trigger button is-text is-size-7 is-icon-only-touch has-inner-focus" aria-label="Your Account" aria-haspopup="true" aria-controls="user-menu" aria-expanded="false">
							<span class="image icon" aria-hidden="true">
								<img class="has-body-background-medium is-rounded" data-profile-property="avatarUrl">
							</span>
							<span class="is-truncated" data-profile-property="userName"></span>
						</button>
						<div class="dropdown-menu box" id="user-menu" role="menu">
							<div class="media is-user-dir">
								<div class="media-left">
									<span class="image is-64x64" aria-hidden="true">
										<img class="has-body-background-medium is-rounded" data-profile-property="avatarUrl">
									</span>
								</div>
								<div class="media-content">
									<p class="title has-margin-top-small">
										<span class="is-truncated" style="max-width: 200px" data-profile-property="userName"></span>
									</p>
									<p class="subtitle">
										<span class="is-truncated" style="max-width: 200px" data-profile-property="upn"></span>
									</p>
								</div>
							</div>
							<ul class="is-unstyled has-margin-none">
								<li><a href="/profile" data-profile-property="profileUrl">Profile</a></li>
								<li><a class="docs-sign-out" href="#">Sign out</a></li>
							</ul>
						</div>
					</div>
				</li>
			</ul>
			<button type="button" class="contents-button" aria-label="Contents" data-bi-name="contents-expand-">
				<span class="docon docon-editor-list-bullet"></span><span>Contents</span>
			</button>
		</div>
	</div>

		<div id="banner-holder" class="has-default-focus has-overflow-hidden">
		</div>

	<div id="disclaimer-holder" class="has-overflow-hidden"></div>
	</div>

	<div class="mainContainer uhf-container  has-top-padding  has-default-focus" data-bi-name="body">

		<div class="columns has-large-gaps ">

			<section class="primary-holder column is-two-thirds-tablet is-three-quarters-desktop">
				<div class="columns has-large-gaps ">

					<div id="page-actions" class="right-container column is-one-quarter is-one-fifth-desktop is-hidden-mobile is-hidden-tablet-only" data-bi-name="pageactions" role="complementary" aria-label="Page Actions">
							<nav id="side-doc-outline" class="doc-outline" data-bi-name="intopic toc" role="navigation" aria-label="On page navigation">
								<h3>In this article</h3>
							</nav>
					</div>


				<div id="main-column" class="column  is-full is-four-fifths-desktop ">

					<main id="main" role="main" class="content " data-bi-name="content" lang="en-us" dir="ltr">



						<h1 id="async-in-depth" sourcefile="docs/standard/async-in-depth.md" sourcestartlinenumber="11">Async in depth</h1>

						<ul class="metadata page-metadata" data-bi-name="page info" lang="en-us" dir="ltr">
							<li class="displayDate loading">
								<time role="presentation" datetime="2016-06-20T00:00:00.000Z" data-article-date-source="ms.date">06/20/2016</time>
							</li>
								<li class="readingTime">9 minutes to read</li>
							<li class="contributors-holder">
								<span class="contributors-text">Contributors</span>
								<ul class="contributors" data-bi-name="contributors">
											<li><a href="https://github.com/cartermp" title="Phillip Carter" data-bi-name="contributorprofile"><img src="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/contributor.svg" data-src="https://github.com/cartermp.png?size=32" alt="Phillip Carter"></a></li>
											<li><a href="https://github.com/laurentkempe" title="Laurent Kempé" data-bi-name="contributorprofile"><img src="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/contributor.svg" data-src="https://github.com/laurentkempe.png?size=32" alt="Laurent Kempé"></a></li>
											<li><a href="https://github.com/nschonni" title="Nick Schonning" data-bi-name="contributorprofile"><img src="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/contributor.svg" data-src="https://github.com/nschonni.png?size=32" alt="Nick Schonning"></a></li>
											<li><a href="https://github.com/StevenTCramer" title="Steven T. Cramer" data-bi-name="contributorprofile"><img src="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/contributor.svg" data-src="https://github.com/StevenTCramer.png?size=32" alt="Steven T. Cramer"></a></li>
											<li><a href="https://github.com/v-aljenk" title="Alma Jenks" data-bi-name="contributorprofile"><img src="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/contributor.svg" data-src="https://github.com/v-aljenk.png?size=32" alt="Alma Jenks"></a></li>
											<li><a href="https://github.com/dotnet/docs/blob/master/docs/standard/async-in-depth.md" title="all 19 contributors" data-bi-name="contributorshowall"><span aria-hidden="true">all</span></a></li>
								</ul>
							</li>

						</ul>

						<nav id="center-doc-outline" class="doc-outline is-hidden-desktop" data-bi-name="intopic toc" role="navigation" aria-label="On page navigation">
							<h3>In this article</h3>
						</nav>


						<!-- <content> -->
							
<p>Writing I/O- and CPU-bound asynchronous code is straightforward using the .NET Task-based async model. The model is exposed by the <code>Task</code> and <code>Task&lt;T&gt;</code> types and the <code>async</code> and <code>await</code> keywords in C# and Visual Basic. (Language-specific resources are found in the <a href="#see-also" data-linktype="self-bookmark">See also</a> section.) This article explains how to use .NET async and provides insight into the async framework used under the covers.</p>
<h2 id="task-and-taskt">Task and Task&lt;T&gt;</h2>
<p>Tasks are constructs used to implement what is known as the <a href="https://en.wikipedia.org/wiki/Futures_and_promises" data-linktype="external">Promise Model of Concurrency</a>.  In short, they offer you a &quot;promise&quot; that work will be completed at a later point, letting you coordinate with the promise with a clean API.</p>
<ul>
<li><code>Task</code> represents a single operation which does not return a value.</li>
<li><code>Task&lt;T&gt;</code> represents a single operation which returns a value of type <code>T</code>.</li>
</ul>
<p>It’s important to reason about tasks as abstractions of work happening asynchronously, and <em>not</em> an abstraction over threading. By default, tasks execute on the current thread and delegate work to the Operating System, as appropriate. Optionally, tasks can be explicitly requested to run on a separate thread via the <code>Task.Run</code> API.</p>
<p>Tasks expose an API protocol for monitoring, waiting upon and accessing the result value (in the case of <code>Task&lt;T&gt;</code>) of a task. Language integration, with the <code>await</code> keyword, provides a higher-level abstraction for using tasks.</p>
<p>Using <code>await</code> allows your application or service to perform useful work while a task is running by yielding control to its caller until the task is done. Your code does not need to rely on callbacks or events to continue execution after the task has been completed. The language and task API integration does that for you. If you’re using <code>Task&lt;T&gt;</code>, the <code>await</code> keyword will additionally &quot;unwrap&quot; the value returned when the Task is complete.  The details of how this works are explained further below.</p>
<p>You can learn more about tasks and the different ways to interact with them in the <a href="asynchronous-programming-patterns/task-based-asynchronous-pattern-tap" data-linktype="relative-path">Task-based Asynchronous Pattern (TAP)</a> topic.</p>
<h2 id="deeper-dive-into-tasks-for-an-io-bound-operation">Deeper Dive into Tasks for an I/O-Bound Operation</h2>
<p>The following section describes a 10,000 foot view of what happens with a typical async I/O call. Let's start with a couple examples.</p>
<p>The first example calls an async method and returns an active task, likely yet to complete.</p>
<pre><code class="lang-csharp">public Task&lt;string&gt; GetHtmlAsync()
{
    // Execution is synchronous here
    var client = new HttpClient();

    return client.GetStringAsync(&quot;https://www.dotnetfoundation.org&quot;);
}
</code></pre>
<p>The second example adds the use of the <code>async</code> and <code>await</code> keywords to operate on the task.</p>
<pre><code class="lang-csharp">public async Task&lt;string&gt; GetFirstCharactersCountAsync(string url, int count)
{
    // Execution is synchronous here
    var client = new HttpClient();

    // Execution of GetFirstCharactersCountAsync() is yielded to the caller here
    // GetStringAsync returns a Task&lt;string&gt;, which is *awaited*
    var page = await client.GetStringAsync(&quot;https://www.dotnetfoundation.org&quot;);

    // Execution resumes when the client.GetStringAsync task completes,
    // becoming synchronous again.

    if (count &gt; page.Length)
    {
        return page;
    }
    else
    {
        return page.Substring(0, count);
    }
}
</code></pre>
<p>The call to <code>GetStringAsync()</code> calls through lower-level .NET libraries (perhaps calling other async methods) until it reaches a P/Invoke interop call into a native networking library. The native library may subsequently call into a System API call (such as <code>write()</code> to a socket on Linux). A task object will be created at the native/managed boundary, possibly using <a class="xref" href="/en-us/dotnet/api/system.threading.tasks.taskcompletionsource-1.setresult#System_Threading_Tasks_TaskCompletionSource_1_SetResult__0_" data-linktype="absolute-path">TaskCompletionSource</a>. The task object will be passed up through the layers, possibly operated on or directly returned, eventually returned to the initial caller.</p>
<p>In the second example above, a <code>Task&lt;T&gt;</code> object will be returned from <code>GetStringAsync</code>. The use of the <code>await</code> keyword causes the method to return a newly created task object. Control returns to the caller from this location in the <code>GetFirstCharactersCountAsync</code> method. The methods and properties of the <a class="xref" href="/en-us/dotnet/api/system.threading.tasks.task-1" data-linktype="absolute-path">Task&lt;T&gt;</a> object enable callers to monitor the progress of the task, which will complete when the remaining code in GetFirstCharactersCountAsync has executed.</p>
<p>After the System API call, the request is now in kernel space, making its way to the networking subsystem of the OS (such as <code>/net</code> in the Linux Kernel).  Here the OS will handle the networking request <em>asynchronously</em>.  Details may be different depending on the OS used (the device driver call may be scheduled as a signal sent back to the runtime, or a device driver call may be made and <em>then</em> a signal sent back), but eventually the runtime will be informed that the networking request is in progress.  At this time, the work for the device driver will either be scheduled, in-progress, or already finished (the request is already out &quot;over the wire&quot;) - but because this is all happening asynchronously, the device driver is able to immediately handle something else!</p>
<p>For example, in Windows an OS thread makes a call to the network device driver and asks it to perform the networking operation via an Interrupt Request Packet (IRP) which represents the operation.  The device driver receives the IRP, makes the call to the network, marks the IRP as &quot;pending&quot;, and returns back to the OS.  Because the OS thread now knows that the IRP is &quot;pending&quot;, it doesn't have any more work to do for this job and &quot;returns&quot; back so that it can be used to perform other work.</p>
<p>When the request is fulfilled and data comes back through the device driver, it notifies the CPU of new data received via an interrupt.  How this interrupt gets handled will vary depending on the OS, but eventually the data will be passed through the OS until it reaches a system interop call (for example, in Linux an interrupt handler will schedule the bottom half of the IRQ to pass the data up through the OS asynchronously).  Note that this <em>also</em> happens asynchronously!  The result is queued up until the next available thread is able to execute the async method and &quot;unwrap&quot; the result of the completed task.</p>
<p>Throughout this entire process, a key takeaway is that <strong>no thread is dedicated to running the task</strong>.  Although work is executed in some context (that is, the OS does have to pass data to a device driver and respond to an interrupt), there is no thread dedicated to <em>waiting</em> for data from the request to come back.  This allows the system to handle a much larger volume of work rather than waiting for some I/O call to finish.</p>
<p>Although the above may seem like a lot of work to be done, when measured in terms of wall clock time, it’s miniscule compared to the time it takes to do the actual I/O work. Although not at all precise, a potential timeline for such a call would look like this:</p>
<p>0-1————————————————————————————————————————————————–2-3</p>
<ul>
<li>Time spent from points <code>0</code> to <code>1</code> is everything up until an async method yields control to its caller.</li>
<li>Time spent from points <code>1</code> to <code>2</code> is the time spent on I/O, with no CPU cost.</li>
<li>Finally, time spent from points <code>2</code> to <code>3</code> is passing control back (and potentially a value) to the async method, at which point it is executing again.</li>
</ul>
<h3 id="what-does-this-mean-for-a-server-scenario">What does this mean for a server scenario?</h3>
<p>This model works well with a typical server scenario workload.  Because there are no threads dedicated to blocking on unfinished tasks, the server threadpool can service a much higher volume of web requests.</p>
<p>Consider two servers: one that runs async code, and one that does not.  For the purpose of this example, each server only has 5 threads available to service requests.  Note that these numbers are imaginarily small and serve only in a demonstrative context.</p>
<p>Assume both servers receive 6 concurrent requests. Each request performs an I/O operation.  The server <em>without</em> async code has to queue up the 6th request until one of the 5 threads have finished the I/O-bound work and written a response. At the point that the 20th request comes in, the server might start to slow down, because the queue is getting too long.</p>
<p>The server <em>with</em> async code running on it still queues up the 6th request, but because it uses <code>async</code> and <code>await</code>, each of its threads are freed up when the I/O-bound work starts, rather than when it finishes.  By the time the 20th request comes in, the queue for incoming requests will be far smaller (if it has anything in it at all), and the server won't slow down.</p>
<p>Although this is a contrived example, it works in a very similar fashion in the real world.  In fact, you can expect a server to be able to handle an order of magnitude more requests using <code>async</code> and <code>await</code> than if it were dedicating a thread for each request it receives.</p>
<h3 id="what-does-this-mean-for-client-scenario">What does this mean for client scenario?</h3>
<p>The biggest gain for using <code>async</code> and <code>await</code> for a client app is an increase in responsiveness.  Although you can make an app responsive by spawning threads manually, the act of spawning a thread is an expensive operation relative to just using <code>async</code> and <code>await</code>.  Especially for something like a mobile game, impacting the UI thread as little as possible where I/O is concerned is crucial.</p>
<p>More importantly, because I/O-bound work spends virtually no time on the CPU, dedicating an entire CPU thread to perform barely any useful work would be a poor use of resources.</p>
<p>Additionally, dispatching work to the UI thread (such as updating a UI) is very simple with <code>async</code> methods, and does not require extra work (such as calling a thread-safe delegate).</p>
<h2 id="deeper-dive-into-task-and-taskt-for-a-cpu-bound-operation">Deeper Dive into Task and Task&lt;T&gt; for a CPU-Bound Operation</h2>
<p>CPU-bound <code>async</code> code is a bit different than I/O-bound <code>async</code> code.  Because the work is done on the CPU, there's no way to get around dedicating a thread to the computation.  The use of <code>async</code> and <code>await</code> provides you with a clean way to interact with a background thread and keep the caller of the async method responsive.  Note that this does not provide any protection for shared data.  If you are using shared data, you will still need to apply an appropriate synchronization strategy.</p>
<p>Here's a 10,000 foot view of a CPU-bound async call:</p>
<pre><code class="lang-csharp">public async Task&lt;int&gt; CalculateResult(InputData data)
{
    // This queues up the work on the threadpool.
    var expensiveResultTask = Task.Run(() =&gt; DoExpensiveCalculation(data));

    // Note that at this point, you can do some other work concurrently,
    // as CalculateResult() is still executing!

    // Execution of CalculateResult is yielded here!
    var result = await expensiveResultTask;

    return result;
}
</code></pre>
<p><code>CalculateResult()</code> executes on the thread it was called on.  When it calls <code>Task.Run</code>, it queues the expensive CPU-bound operation, <code>DoExpensiveCalculation()</code>, on the thread pool and receives a <code>Task&lt;int&gt;</code> handle.  <code>DoExpensiveCalculation()</code> is eventually run concurrently on the next available thread, likely on another CPU core.  It's possible to do concurrent work while <code>DoExpensiveCalculation()</code> is busy on another thread, because the thread which called <code>CalculateResult()</code> is still executing.</p>
<p>Once <code>await</code> is encountered, the execution of <code>CalculateResult()</code> is yielded to its caller, allowing other work to be done with the current thread while <code>DoExpensiveCalculation()</code> is churning out a result.  Once it has finished, the result is queued up to run on the main thread.  Eventually, the main thread will return to executing <code>CalculateResult()</code>, at which point it will have the result of <code>DoExpensiveCalculation()</code>.</p>
<h3 id="why-does-async-help-here">Why does async help here?</h3>
<p><code>async</code> and <code>await</code> are the best practice for managing CPU-bound work when you need responsiveness. There are multiple patterns for using async with CPU-bound work. It's important to note that there is a small cost to using async and it's not recommended for tight loops.  It's up to you to determine how you write your code around this new capability.</p>
<h2 id="see-also">See also</h2>
<ul>
<li><a href="../csharp/async" data-linktype="relative-path">Asynchronous programming in C#</a></li>
<li><a href="../csharp/programming-guide/concepts/async/index" data-linktype="relative-path">Asynchronous programming with async and await (C#)</a></li>
<li><a href="../fsharp/tutorials/asynchronous-and-concurrent-programming/async" data-linktype="relative-path">Async Programming in F#</a></li>
<li><a href="../visual-basic/programming-guide/concepts/async/index" data-linktype="relative-path">Asynchronous Programming with Async and Await (Visual Basic)</a></li>
</ul>

						<!-- </content> -->

						</main>

						<!-- feedback section -->



<section class="feedback-section" data-bi-name="feedback-section">
	<h2 id="feedback">Feedback</h2>

	<div class="alert choose-feedback-type">
		<p id="send-feedback-about">Send feedback about:</p>

		<div class="choose-feedback-buttons">
			<a class="button feedback-type-product has-margin-bottom-small" aria-describedby="send-feedback-about" href="https://developercommunity.visualstudio.com/spaces/61/index.html" data-bi-name="product-feedback">
				<span>This product</span>
				<span class="icon docon docon-navigate-external" aria-hidden="true"></span>
			</a>

			<div class="field has-addons is-inline-flex has-margin-bottom-small">
				<div class="control has-margin-top-none has-margin-bottom-none">
					<button class="button feedback-sign-in-button has-text-wrap" aria-describedby="send-feedback-about" data-bi-name="feedback-sign-in">
						<span class="icon docon docon-brand-github" aria-hidden="true"></span>
						<span>This page</span>
					</button>
				</div>
				<div class="control dropdown has-caret has-margin-top-none has-margin-bottom-none" auto-align>
					<button class="button dropdown-trigger is-full-height" aria-describedby="send-feedback-about" aria-haspopup="true" aria-expanded="false" aria-controls="fbm0" aria-label="Additional feedback options" data-bi-name="documentation-feedback-menu">
						<span class="icon docon docon-chevron-down-light" aria-hidden="true"></span>
					</button>
					<div id="fbm0" class="dropdown-menu documentation-feedback-menu">
						You may also leave feedback directly on <a data-bi-name="create-issue-on-github" href="{0}">GitHub <span class="docon docon-navigate-external" aria-hidden="true"></span></a>.					</div>
				</div>
			</div>

			<div class="field has-addons is-inline-flex has-margin-bottom-small" hidden>
				<div class="control has-margin-top-none has-margin-bottom-none">
					<button class="button feedback-form-toggle" aria-describedby="send-feedback-about" aria-expanded="false" aria-controls="feedback-form"
						data-bi-name="documentation-feedback">
This page					</button>
				</div>
				<div class="control dropdown has-caret has-margin-top-none has-margin-bottom-none" auto-align>
					<button class="button dropdown-trigger" aria-describedby="send-feedback-about" aria-haspopup="true" aria-expanded="false" aria-controls="fbm1" aria-label="Additional feedback options" data-bi-name="documentation-feedback-menu">
						<span class="icon docon docon-chevron-down-light" aria-hidden="true"></span>
					</button>
					<div id="fbm1" class="dropdown-menu documentation-feedback-menu">
						You may also leave feedback directly on <a data-bi-name="create-issue-on-github" href="{0}">GitHub <span class="docon docon-navigate-external" aria-hidden="true"></span></a>.					</div>
				</div>
			</div>
		</div>
	</div>

	<form class="feedback-form" id="feedback-form" accept-charset="UTF-8" autocomplete="off" action="javascript:" hidden>
		<h3 class="feedback-form-heading current-user">
			<img class="avatar" alt="Avatar" width="36" height="36" aria-hidden="true">
			<span class="username" aria-hidden="true"></span>
			<span class="visually-hidden">Liquid error: Can't find the localized string giveDocumentationFeedback for template Conceptual.</span>
		</h3>

		<label>
			<span class="visually-hidden">Issue Title</span>
			<input class="input is-radiusless has-margin-bottom-small" name="title" type="text" placeholder="Issue Title" required pattern=".*\w.*">
		</label>
		<label>
			<span class="visually-hidden">Leave a comment</span>
			<textarea name="body" placeholder="Leave a comment" class="textarea is-radiusless" required></textarea>
		</label>

		<div class="action-container">
			<button class="button is-primary" type="submit" name="submit">Submit feedback</button>
		</div>
	</form>

	<div class="feedback-status alert is-loading" role="alert">
		<p>Loading feedback...</p>
	</div>

	<div class="feedback-tab-group tabGroup" data-tab-group-independent hidden>
		<ul role="tablist">
			<li role="presentation">
				<a href="#tabpanel-issues-open" role="tab" aria-controls="tabpanel-issues-open" data-tab="issues-open" aria-label="Open Issues"></a>
			</li>
			<li role="presentation">
				<a href="#tabpanel-issues-closed" role="tab" aria-controls="tabpanel-issues-closed" data-tab="issues-closed"
				 aria-label="Closed Issues"></a>
			</li>
		</ul>
		<section id="tabpanel-issues-open" role="tabpanel" data-tab="issues-open">
			<div class="no-issues-placeholder">There are no open issues</div>
			<ul class="github-issues-list" aria-label="Open Issues"></ul>
		</section>
		<section id="tabpanel-issues-closed" role="tabpanel" data-tab="issues-closed">
			<div class="no-issues-placeholder">There are no closed issues</div>
			<ul class="github-issues-list" aria-label="Closed Issues"></ul>
		</section>
	</div>
	<div class="action-container">
		<a class="view-on-github" href="https://github.com/dotnet/docs/issues" data-bi-name="view-on-github"
		 hidden>
			<span class="docon docon-brand-github" aria-hidden="true"></span>
			<span>View on GitHub</span>
			<span class="docon docon-navigate-external" aria-hidden="true"></span>
		</a>
	</div>
</section>
						<!-- end feedback section -->

						<div class="footerContainer is-visible-interactive has-default-focus ">
<footer id="footer-interactive" data-bi-name="footer" class="footer-layout">

    <a data-mscc-ic="false" class="locale-selector-link" href="#" data-bi-name="select-locale"><span class="icon docon docon-world is-size-4 has-margin-right-small"></span><span class="local-selector-link-text"></span></a>

    <ul class="links" data-bi-name="footerlinks">
		<li><a data-mscc-ic="false" href="https://docs.microsoft.com/previous-versions/" data-bi-name="archivelink">Previous Version Docs</a></li>
		<li><a data-mscc-ic="false" href="https://docs.microsoft.com/teamblog" data-bi-name="bloglink">Blog</a></li>
		<li><a data-mscc-ic="false" href="https://docs.microsoft.com/contribute" data-bi-name="contributorGuide">Contribute</a></li>
			<li><a data-mscc-ic="false" href="https://go.microsoft.com/fwlink/?LinkId=521839" data-bi-name="privacy">Privacy &amp; Cookies</a></li>
		<li><a data-mscc-ic="false" href="/en-us/legal/termsofuse" data-bi-name="termsofuse">Terms of Use</a></li>
		<li><a data-mscc-ic="false" href="https://aka.ms/sitefeedback" data-bi-name="feedback">Site Feedback</a></li>
		<li><a data-mscc-ic="false" href="https://www.microsoft.com/en-us/legal/intellectualproperty/Trademarks/EN-US.aspx" data-bi-name="trademarks">Trademarks</a></li>
    </ul>
</footer>
						</div>
					</div>

					<!--end of div.columns -->

				</div>

			<!--end of .primary-holder -->
			</section>

				<div id="left-container" class="left-container column is-one-third-tablet is-one-quarter-desktop">
					<nav class="sidebar" id="sidebar" data-bi-name="left toc" role="navigation" aria-label="Main Navigation">
						<button class="sidebar-header has-inner-focus" type="button" aria-label="Close" data-bi-name="contents-collapse">
							<span>Contents</span>
							<span class="docon docon-navigate-close" aria-hidden="true"></span>
						</button>
						<div id="sidebarContent">
							<div class="filterHolder">
							</div>
							<nav class="toc"></nav>
							<div class="pdf-download-holder"></div>
						</div>
					</nav>
				</div>

			<aside id="interactive-container" class="interactive-container is-visible-interactive column has-body-background-dark ">
			</aside>
		</div>

		<!--end of .mainContainer -->
	</div>

	<div id="openFeedbackContainer" class="openfeedback-container"></div>

	<div class="footerContainer has-default-focus is-hidden-interactive ">
<footer id="footer" data-bi-name="footer" class="footer-layout uhf-container has-padding" role="contentinfo">

    <a data-mscc-ic="false" class="locale-selector-link" href="#" data-bi-name="select-locale"><span class="icon docon docon-world is-size-4 has-margin-right-small"></span><span class="local-selector-link-text"></span></a>

    <ul class="links" data-bi-name="footerlinks">
		<li><a data-mscc-ic="false" href="https://docs.microsoft.com/previous-versions/" data-bi-name="archivelink">Previous Version Docs</a></li>
		<li><a data-mscc-ic="false" href="https://docs.microsoft.com/teamblog" data-bi-name="bloglink">Blog</a></li>
		<li><a data-mscc-ic="false" href="https://docs.microsoft.com/contribute" data-bi-name="contributorGuide">Contribute</a></li>
			<li><a data-mscc-ic="false" href="https://go.microsoft.com/fwlink/?LinkId=521839" data-bi-name="privacy">Privacy &amp; Cookies</a></li>
		<li><a data-mscc-ic="false" href="/en-us/legal/termsofuse" data-bi-name="termsofuse">Terms of Use</a></li>
		<li><a data-mscc-ic="false" href="https://aka.ms/sitefeedback" data-bi-name="feedback">Site Feedback</a></li>
		<li><a data-mscc-ic="false" href="https://www.microsoft.com/en-us/legal/intellectualproperty/Trademarks/EN-US.aspx" data-bi-name="trademarks">Trademarks</a></li>
    </ul>
</footer>
	</div>

	<div id="action-panel" role="region" aria-label="Action Panel" class="action-panel has-default-focus" tabindex="-1"></div>
</body>
</html>

<!DOCTYPE html>































<html class="hasSidebar hasPageActions hasBreadcrumb conceptual" lang="en-us" dir="ltr" data-authenticated="false" data-auth-status-determined="false" data-target="docs" x-ms-format-detection="none">

<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<meta property="og:title" content="Async in depth" />
	<meta property="og:type" content="website" />
	<meta property="og:url" content="https://docs.microsoft.com/en-us/dotnet/standard/async-in-depth" />
	<meta property="og:description" content="Learn how writing I&#x2FO-bound and CPU-bound asynchronous code is straightforward using the .NET Task-based async model." />
	<meta property="og:image" content="https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png" />
	<meta property="og:image:alt" content="Microsoft Logo" />

	<meta name="twitter:card" content="summary" />
	<meta name="twitter:site" content="@docsmsft" />

		<meta name="ms.devlang" content="dotnet" />
<meta name="author" content="cartermp" />
<meta name="ms.author" content="wiwagn" />
<meta name="breadcrumb_path" content="/dotnet/breadcrumb/toc.json" />
<meta name="apiPlatform" content="dotnet" />
<meta name="ms.topic" content="conceptual" />
<meta name="ms.prod" content="dotnet" />
<meta name="uhfHeaderId" content="MSDocsHeader-DotNet" />
<meta name="ms.assetid" content="1e38f9d9-8f84-46ee-a15f-199aec4f2e34" />
<meta name="description" content="Learn how writing I&amp;#x2FO-bound and CPU-bound asynchronous code is straightforward using the .NET Task-based async model." />
<meta name="ms.date" content="06/20/2016" />
<meta name="ms.technology" content="dotnet-standard" />
<meta name="search.ms_sitename" content="Docs" />
<meta name="search.ms_docsetname" content="core-docs" />
<meta name="locale" content="en-us" />
<meta name="site_name" content="Docs" />
<meta name="search.ms_product" content="VS" />
<meta name="depot_name" content="VS.core-docs" />
<meta name="updated_at" content="2019-03-15 12:01 PM" />
<meta name="gitcommit" content="https://github.com/dotnet/docs/blob/769f78acacacba93a691293d64aa630625b7d1ee/docs/standard/async-in-depth.md" />
<meta name="original_content_git_url" content="https://github.com/dotnet/docs/blob/live/docs/standard/async-in-depth.md" />
<meta name="document_id" content="88cc5f21-0b4b-f33c-b7fc-96bb9c95ddcf" />
<meta name="document_version_independent_id" content="46697309-d4fd-1cd9-f8ff-e4577be08003" />
<meta name="page_type" content="conceptual" />
<meta name="toc_rel" content="../toc.json" />
<meta name="pdf_url_template" content="https://docs.microsoft.com/pdfstore/en-us/VS.core-docs/{branchName}{pdfName}" />
<meta name="search.mshattr.devlang" content="csharp" />
<meta name="word_count" content="1924" />

	<meta name="scope" content=".NET" />
<link href="https://docs.microsoft.com/en-us/dotnet/standard/async-in-depth" rel="canonical">
	<title>Async in depth | Microsoft Docs</title>

		<link rel="stylesheet" href="/_themes/docs.theme/master/en-us/_themes/styles/6e59f4a9.site-ltr.css ">

	<link rel="stylesheet" href="/_themes/docs.theme/master/en-us/_themes/styles/f1e7d9d9.conceptual.css ">


	<script>
	var msDocs = {
		data: {
			timeOrigin: Date.now(),
			azureHeaderLocale: 'en-us',
			contentLocale: 'en-us',
			contentDir: 'ltr',
			userLocale: 'en-us',
			userDir: 'ltr',
			pageTemplate: 'Conceptual',
			brand: '',
			context: {

			},
			hasComments: true,
			feedbackSystem: 'GitHub',
			feedbackGitHubRepo: 'dotnet/docs',
			feedbackProductUrl: 'https://developercommunity.visualstudio.com/spaces/61/index.html',
			contentGitUrl: 'https://github.com/dotnet/docs/blob/master/docs/standard/async-in-depth.md',
		},
		functions:{},
		settings:{
			extendBreadcrumb: false,
			enableUHFPPE: true
		}
	};
	if (!('Promise' in window && 'resolve' in window.Promise && 'reject' in window.Promise && 'all' in window.Promise && 'race' in window.Promise)) {
		document.write('<script src="https://static.docs.com/ui/third-party/bluebird/3.5.0/bluebird.min.js" integrity="sha384-aD4BDeDGeLXLpPK4yKeqtZQa9dv4a/7mQ+4L5vwshIYH1Mc2BrXvHd32iHzYCQy5" crossorigin="anonymous"><\/script>');
	}
	if (typeof fetch !== 'function') {
		document.write('<script src="https://static.docs.com/ui/third-party/fetch/2.0.3/fetch.min.js" integrity="sha384-H3LQq82b6Mm80GYRHtRSlTwO9DoXctmYCVEYk9M8mp97lRzs6DuSrHVUg3SBP9w0" crossorigin="anonymous"><\/script>');
	}
	if (typeof HTMLTemplateElement === 'undefined') {
		document.write('<script src="https://static.docs.com/ui/third-party/template/1.4.0/template.min.js" integrity="sha384-1zKzI6ldTVHMU7n0W2HpE/lhHI+UG4D9IIaxbj3kT2UhCWicdTuJkTtnKuu0CQzN" crossorigin="anonymous"><\/script>');
	}
	</script>

	<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.3.1.min.js" integrity="sha384-tsQFqpEReu7ZLhBV2VZlAu7zcOV+rXbYlF2cqB8txI/8aZajjp4Bqd+V6D5IgvKT" crossorigin="anonymous"></script>
		<script src="/_themes/docs.theme/master/en-us/_themes/scripts/abb4a760.index-docs.js"></script>

</head>

<body lang="en-us" dir="ltr">
<div class="header-holder">
		<div id="headerAreaHolder" data-bi-name="header">
			<div id="uhf-placeholder"></div>
		</div>
	<div class="content-header uhf-container has-padding has-default-focus" data-bi-name="content-header">
		<nav class="has-padding-none-mobile" data-bi-name="breadcrumb" itemscope itemtype="http://schema.org/BreadcrumbList" role="navigation" aria-label="Breadcrumb">
		<ul id="page-breadcrumbs" class="breadcrumbs">
		</ul>
		</nav>
		<div class="content-header-controls exit-focus">
			<button type="button" class="ap-collapse-behavior ap-expanded button" data-bi-name="ap-collapse" aria-controls="action-panel">
				<span class="icon"><span class="docon docon-exit-mode"></span></span>
				<span>Exit focus mode</span>
			</button>
			
		</div>
		<div class="content-header-controls">
			<button type="button" class="contents-button button" data-bi-name="contents-expand" aria-controls="sidebar" aria-haspopup="true">
				<span class="icon"><span class="docon docon-menu" aria-hidden="true"></span></span>
				<span>Contents</span>
			</button>
		</div>
		<div class="action-bar">
			<ul class="action-list">
						<li>
							<a href="#feedback" class="button is-text is-size-7 is-icon-only-touch" data-bi-name="comments">
								<span class="icon">
									<span class="docon docon-comment-lines" aria-hidden="true"></span>
								</span>
								<span class="action-item-text">Feedback</span>
							</a>
						</li>
							<li id="contenteditbtn">
									<a href="https://github.com/dotnet/docs/blob/master/docs/standard/async-in-depth.md" class="button is-text is-icon-only-touch is-size-7" title="Edit This Document" data-bi-name="edit" data-original_content_git_url="https://github.com/dotnet/docs/blob/live/docs/standard/async-in-depth.md" data-original_content_git_url_template="" data-pr_repo="" data-pr_branch="">
									<span class="icon">
										<span class="docon docon-edit-outline" aria-hidden="true"></span>
									</span>
									<span class="action-item-text">Edit</span>
								</a>
							</li>
				<li>
					<div class="sharing dropdown has-caret" auto-align>
						<a href="#" class="dropdown-trigger button is-text is-size-7 is-icon-only-touch" aria-haspopup="true" aria-controls="sharing-menu" aria-expanded="false" title="Share This Document" data-bi-name="share">
							<span class="icon">
								<span class="docon docon-sharing" aria-hidden="true"></span>
							</span>
							<span class="action-item-text">Share</span>
						</a>
						<div class="dropdown-menu" id="sharing-menu" role="menu">
							<ul data-bi-name="share-links">
								<li><a class="share-twitter" data-bi-name="twitter">
									<span class="icon">
										<span class="docon docon-brand-twitter" aria-hidden="true"></span>
									</span>
									<span>Twitter</span></a></li>
								<li><a class="share-linkedin" data-bi-name="linkedin">
									<span class="icon">
										<span class="docon docon-brand-linkedin" aria-hidden="true"></span>
									</span>
									<span>LinkedIn</span></a></li>
								<li><a class="share-facebook" data-bi-name="facebook">
									<span class="icon">
										<span class="docon docon-brand-facebook" aria-hidden="true"></span>
									</span>
									<span>Facebook</span></a></li>
								<li><a class="share-email" data-bi-name="email">
									<span class="icon">
										<span class="docon docon-mail-message-fill" aria-hidden="true"></span>
									</span>
									<span>Email</span></a></li>
							</ul>
						</div>
					</div>
				</li>
				<li>
					<button class="toggle-theme button is-text is-size-7 is-icon-only-touch" aria-label="toggle-theme" data-bi-name="select-theme">
						<span class="icon">
							<span class="docon docon-sun"></span>
						</span>
						<span class="action-item-text">Theme</span>
					</button>
				</li>
				<li class="is-unstyled-action-list-item">
					<a class="docs-sign-in auth-status-determined not-authenticated button is-text has-text-primary is-size-7" href="#">Sign in</a>
					<div class="dropdown has-caret auth-status-determined authenticated" auto-align>
						<button class="dropdown-trigger button is-text is-size-7 is-icon-only-touch has-inner-focus" aria-label="Your Account" aria-haspopup="true" aria-controls="user-menu" aria-expanded="false">
							<span class="image icon" aria-hidden="true">
								<img class="has-body-background-medium is-rounded" data-profile-property="avatarUrl">
							</span>
							<span class="is-truncated" data-profile-property="userName"></span>
						</button>
						<div class="dropdown-menu box" id="user-menu" role="menu">
							<div class="media is-user-dir">
								<div class="media-left">
									<span class="image is-64x64" aria-hidden="true">
										<img class="has-body-background-medium is-rounded" data-profile-property="avatarUrl">
									</span>
								</div>
								<div class="media-content">
									<p class="title has-margin-top-small">
										<span class="is-truncated" style="max-width: 200px" data-profile-property="userName"></span>
									</p>
									<p class="subtitle">
										<span class="is-truncated" style="max-width: 200px" data-profile-property="upn"></span>
									</p>
								</div>
							</div>
							<ul class="is-unstyled has-margin-none">
								<li><a href="/profile" data-profile-property="profileUrl">Profile</a></li>
								<li><a class="docs-sign-out" href="#">Sign out</a></li>
							</ul>
						</div>
					</div>
				</li>
			</ul>
			<button type="button" class="contents-button" aria-label="Contents" data-bi-name="contents-expand-">
				<span class="docon docon-editor-list-bullet"></span><span>Contents</span>
			</button>
		</div>
	</div>

		<div id="banner-holder" class="has-default-focus has-overflow-hidden">
		</div>

	<div id="disclaimer-holder" class="has-overflow-hidden"></div>
	</div>

	<div class="mainContainer uhf-container  has-top-padding  has-default-focus" data-bi-name="body">

		<div class="columns has-large-gaps ">

			<section class="primary-holder column is-two-thirds-tablet is-three-quarters-desktop">
				<div class="columns has-large-gaps ">

					<div id="page-actions" class="right-container column is-one-quarter is-one-fifth-desktop is-hidden-mobile is-hidden-tablet-only" data-bi-name="pageactions" role="complementary" aria-label="Page Actions">
							<nav id="side-doc-outline" class="doc-outline" data-bi-name="intopic toc" role="navigation" aria-label="On page navigation">
								<h3>In this article</h3>
							</nav>
					</div>


				<div id="main-column" class="column  is-full is-four-fifths-desktop ">

					<main id="main" role="main" class="content " data-bi-name="content" lang="en-us" dir="ltr">



						<h1 id="async-in-depth" sourcefile="docs/standard/async-in-depth.md" sourcestartlinenumber="11">Async in depth</h1>

						<ul class="metadata page-metadata" data-bi-name="page info" lang="en-us" dir="ltr">
							<li class="displayDate loading">
								<time role="presentation" datetime="2016-06-20T00:00:00.000Z" data-article-date-source="ms.date">06/20/2016</time>
							</li>
								<li class="readingTime">9 minutes to read</li>
							<li class="contributors-holder">
								<span class="contributors-text">Contributors</span>
								<ul class="contributors" data-bi-name="contributors">
											<li><a href="https://github.com/cartermp" title="Phillip Carter" data-bi-name="contributorprofile"><img src="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/contributor.svg" data-src="https://github.com/cartermp.png?size=32" alt="Phillip Carter"></a></li>
											<li><a href="https://github.com/laurentkempe" title="Laurent Kempé" data-bi-name="contributorprofile"><img src="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/contributor.svg" data-src="https://github.com/laurentkempe.png?size=32" alt="Laurent Kempé"></a></li>
											<li><a href="https://github.com/nschonni" title="Nick Schonning" data-bi-name="contributorprofile"><img src="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/contributor.svg" data-src="https://github.com/nschonni.png?size=32" alt="Nick Schonning"></a></li>
											<li><a href="https://github.com/StevenTCramer" title="Steven T. Cramer" data-bi-name="contributorprofile"><img src="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/contributor.svg" data-src="https://github.com/StevenTCramer.png?size=32" alt="Steven T. Cramer"></a></li>
											<li><a href="https://github.com/v-aljenk" title="Alma Jenks" data-bi-name="contributorprofile"><img src="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/contributor.svg" data-src="https://github.com/v-aljenk.png?size=32" alt="Alma Jenks"></a></li>
											<li><a href="https://github.com/dotnet/docs/blob/master/docs/standard/async-in-depth.md" title="all 19 contributors" data-bi-name="contributorshowall"><span aria-hidden="true">all</span></a></li>
								</ul>
							</li>

						</ul>

						<nav id="center-doc-outline" class="doc-outline is-hidden-desktop" data-bi-name="intopic toc" role="navigation" aria-label="On page navigation">
							<h3>In this article</h3>
						</nav>


						<!-- <content> -->
							
<p>Writing I/O- and CPU-bound asynchronous code is straightforward using the .NET Task-based async model. The model is exposed by the <code>Task</code> and <code>Task&lt;T&gt;</code> types and the <code>async</code> and <code>await</code> keywords in C# and Visual Basic. (Language-specific resources are found in the <a href="#see-also" data-linktype="self-bookmark">See also</a> section.) This article explains how to use .NET async and provides insight into the async framework used under the covers.</p>
<h2 id="task-and-taskt">Task and Task&lt;T&gt;</h2>
<p>Tasks are constructs used to implement what is known as the <a href="https://en.wikipedia.org/wiki/Futures_and_promises" data-linktype="external">Promise Model of Concurrency</a>.  In short, they offer you a &quot;promise&quot; that work will be completed at a later point, letting you coordinate with the promise with a clean API.</p>
<ul>
<li><code>Task</code> represents a single operation which does not return a value.</li>
<li><code>Task&lt;T&gt;</code> represents a single operation which returns a value of type <code>T</code>.</li>
</ul>
<p>It’s important to reason about tasks as abstractions of work happening asynchronously, and <em>not</em> an abstraction over threading. By default, tasks execute on the current thread and delegate work to the Operating System, as appropriate. Optionally, tasks can be explicitly requested to run on a separate thread via the <code>Task.Run</code> API.</p>
<p>Tasks expose an API protocol for monitoring, waiting upon and accessing the result value (in the case of <code>Task&lt;T&gt;</code>) of a task. Language integration, with the <code>await</code> keyword, provides a higher-level abstraction for using tasks.</p>
<p>Using <code>await</code> allows your application or service to perform useful work while a task is running by yielding control to its caller until the task is done. Your code does not need to rely on callbacks or events to continue execution after the task has been completed. The language and task API integration does that for you. If you’re using <code>Task&lt;T&gt;</code>, the <code>await</code> keyword will additionally &quot;unwrap&quot; the value returned when the Task is complete.  The details of how this works are explained further below.</p>
<p>You can learn more about tasks and the different ways to interact with them in the <a href="asynchronous-programming-patterns/task-based-asynchronous-pattern-tap" data-linktype="relative-path">Task-based Asynchronous Pattern (TAP)</a> topic.</p>
<h2 id="deeper-dive-into-tasks-for-an-io-bound-operation">Deeper Dive into Tasks for an I/O-Bound Operation</h2>
<p>The following section describes a 10,000 foot view of what happens with a typical async I/O call. Let's start with a couple examples.</p>
<p>The first example calls an async method and returns an active task, likely yet to complete.</p>
<pre><code class="lang-csharp">public Task&lt;string&gt; GetHtmlAsync()
{
    // Execution is synchronous here
    var client = new HttpClient();

    return client.GetStringAsync(&quot;https://www.dotnetfoundation.org&quot;);
}
</code></pre>
<p>The second example adds the use of the <code>async</code> and <code>await</code> keywords to operate on the task.</p>
<pre><code class="lang-csharp">public async Task&lt;string&gt; GetFirstCharactersCountAsync(string url, int count)
{
    // Execution is synchronous here
    var client = new HttpClient();

    // Execution of GetFirstCharactersCountAsync() is yielded to the caller here
    // GetStringAsync returns a Task&lt;string&gt;, which is *awaited*
    var page = await client.GetStringAsync(&quot;https://www.dotnetfoundation.org&quot;);

    // Execution resumes when the client.GetStringAsync task completes,
    // becoming synchronous again.

    if (count &gt; page.Length)
    {
        return page;
    }
    else
    {
        return page.Substring(0, count);
    }
}
</code></pre>
<p>The call to <code>GetStringAsync()</code> calls through lower-level .NET libraries (perhaps calling other async methods) until it reaches a P/Invoke interop call into a native networking library. The native library may subsequently call into a System API call (such as <code>write()</code> to a socket on Linux). A task object will be created at the native/managed boundary, possibly using <a class="xref" href="/en-us/dotnet/api/system.threading.tasks.taskcompletionsource-1.setresult#System_Threading_Tasks_TaskCompletionSource_1_SetResult__0_" data-linktype="absolute-path">TaskCompletionSource</a>. The task object will be passed up through the layers, possibly operated on or directly returned, eventually returned to the initial caller.</p>
<p>In the second example above, a <code>Task&lt;T&gt;</code> object will be returned from <code>GetStringAsync</code>. The use of the <code>await</code> keyword causes the method to return a newly created task object. Control returns to the caller from this location in the <code>GetFirstCharactersCountAsync</code> method. The methods and properties of the <a class="xref" href="/en-us/dotnet/api/system.threading.tasks.task-1" data-linktype="absolute-path">Task&lt;T&gt;</a> object enable callers to monitor the progress of the task, which will complete when the remaining code in GetFirstCharactersCountAsync has executed.</p>
<p>After the System API call, the request is now in kernel space, making its way to the networking subsystem of the OS (such as <code>/net</code> in the Linux Kernel).  Here the OS will handle the networking request <em>asynchronously</em>.  Details may be different depending on the OS used (the device driver call may be scheduled as a signal sent back to the runtime, or a device driver call may be made and <em>then</em> a signal sent back), but eventually the runtime will be informed that the networking request is in progress.  At this time, the work for the device driver will either be scheduled, in-progress, or already finished (the request is already out &quot;over the wire&quot;) - but because this is all happening asynchronously, the device driver is able to immediately handle something else!</p>
<p>For example, in Windows an OS thread makes a call to the network device driver and asks it to perform the networking operation via an Interrupt Request Packet (IRP) which represents the operation.  The device driver receives the IRP, makes the call to the network, marks the IRP as &quot;pending&quot;, and returns back to the OS.  Because the OS thread now knows that the IRP is &quot;pending&quot;, it doesn't have any more work to do for this job and &quot;returns&quot; back so that it can be used to perform other work.</p>
<p>When the request is fulfilled and data comes back through the device driver, it notifies the CPU of new data received via an interrupt.  How this interrupt gets handled will vary depending on the OS, but eventually the data will be passed through the OS until it reaches a system interop call (for example, in Linux an interrupt handler will schedule the bottom half of the IRQ to pass the data up through the OS asynchronously).  Note that this <em>also</em> happens asynchronously!  The result is queued up until the next available thread is able to execute the async method and &quot;unwrap&quot; the result of the completed task.</p>
<p>Throughout this entire process, a key takeaway is that <strong>no thread is dedicated to running the task</strong>.  Although work is executed in some context (that is, the OS does have to pass data to a device driver and respond to an interrupt), there is no thread dedicated to <em>waiting</em> for data from the request to come back.  This allows the system to handle a much larger volume of work rather than waiting for some I/O call to finish.</p>
<p>Although the above may seem like a lot of work to be done, when measured in terms of wall clock time, it’s miniscule compared to the time it takes to do the actual I/O work. Although not at all precise, a potential timeline for such a call would look like this:</p>
<p>0-1————————————————————————————————————————————————–2-3</p>
<ul>
<li>Time spent from points <code>0</code> to <code>1</code> is everything up until an async method yields control to its caller.</li>
<li>Time spent from points <code>1</code> to <code>2</code> is the time spent on I/O, with no CPU cost.</li>
<li>Finally, time spent from points <code>2</code> to <code>3</code> is passing control back (and potentially a value) to the async method, at which point it is executing again.</li>
</ul>
<h3 id="what-does-this-mean-for-a-server-scenario">What does this mean for a server scenario?</h3>
<p>This model works well with a typical server scenario workload.  Because there are no threads dedicated to blocking on unfinished tasks, the server threadpool can service a much higher volume of web requests.</p>
<p>Consider two servers: one that runs async code, and one that does not.  For the purpose of this example, each server only has 5 threads available to service requests.  Note that these numbers are imaginarily small and serve only in a demonstrative context.</p>
<p>Assume both servers receive 6 concurrent requests. Each request performs an I/O operation.  The server <em>without</em> async code has to queue up the 6th request until one of the 5 threads have finished the I/O-bound work and written a response. At the point that the 20th request comes in, the server might start to slow down, because the queue is getting too long.</p>
<p>The server <em>with</em> async code running on it still queues up the 6th request, but because it uses <code>async</code> and <code>await</code>, each of its threads are freed up when the I/O-bound work starts, rather than when it finishes.  By the time the 20th request comes in, the queue for incoming requests will be far smaller (if it has anything in it at all), and the server won't slow down.</p>
<p>Although this is a contrived example, it works in a very similar fashion in the real world.  In fact, you can expect a server to be able to handle an order of magnitude more requests using <code>async</code> and <code>await</code> than if it were dedicating a thread for each request it receives.</p>
<h3 id="what-does-this-mean-for-client-scenario">What does this mean for client scenario?</h3>
<p>The biggest gain for using <code>async</code> and <code>await</code> for a client app is an increase in responsiveness.  Although you can make an app responsive by spawning threads manually, the act of spawning a thread is an expensive operation relative to just using <code>async</code> and <code>await</code>.  Especially for something like a mobile game, impacting the UI thread as little as possible where I/O is concerned is crucial.</p>
<p>More importantly, because I/O-bound work spends virtually no time on the CPU, dedicating an entire CPU thread to perform barely any useful work would be a poor use of resources.</p>
<p>Additionally, dispatching work to the UI thread (such as updating a UI) is very simple with <code>async</code> methods, and does not require extra work (such as calling a thread-safe delegate).</p>
<h2 id="deeper-dive-into-task-and-taskt-for-a-cpu-bound-operation">Deeper Dive into Task and Task&lt;T&gt; for a CPU-Bound Operation</h2>
<p>CPU-bound <code>async</code> code is a bit different than I/O-bound <code>async</code> code.  Because the work is done on the CPU, there's no way to get around dedicating a thread to the computation.  The use of <code>async</code> and <code>await</code> provides you with a clean way to interact with a background thread and keep the caller of the async method responsive.  Note that this does not provide any protection for shared data.  If you are using shared data, you will still need to apply an appropriate synchronization strategy.</p>
<p>Here's a 10,000 foot view of a CPU-bound async call:</p>
<pre><code class="lang-csharp">public async Task&lt;int&gt; CalculateResult(InputData data)
{
    // This queues up the work on the threadpool.
    var expensiveResultTask = Task.Run(() =&gt; DoExpensiveCalculation(data));

    // Note that at this point, you can do some other work concurrently,
    // as CalculateResult() is still executing!

    // Execution of CalculateResult is yielded here!
    var result = await expensiveResultTask;

    return result;
}
</code></pre>
<p><code>CalculateResult()</code> executes on the thread it was called on.  When it calls <code>Task.Run</code>, it queues the expensive CPU-bound operation, <code>DoExpensiveCalculation()</code>, on the thread pool and receives a <code>Task&lt;int&gt;</code> handle.  <code>DoExpensiveCalculation()</code> is eventually run concurrently on the next available thread, likely on another CPU core.  It's possible to do concurrent work while <code>DoExpensiveCalculation()</code> is busy on another thread, because the thread which called <code>CalculateResult()</code> is still executing.</p>
<p>Once <code>await</code> is encountered, the execution of <code>CalculateResult()</code> is yielded to its caller, allowing other work to be done with the current thread while <code>DoExpensiveCalculation()</code> is churning out a result.  Once it has finished, the result is queued up to run on the main thread.  Eventually, the main thread will return to executing <code>CalculateResult()</code>, at which point it will have the result of <code>DoExpensiveCalculation()</code>.</p>
<h3 id="why-does-async-help-here">Why does async help here?</h3>
<p><code>async</code> and <code>await</code> are the best practice for managing CPU-bound work when you need responsiveness. There are multiple patterns for using async with CPU-bound work. It's important to note that there is a small cost to using async and it's not recommended for tight loops.  It's up to you to determine how you write your code around this new capability.</p>
<h2 id="see-also">See also</h2>
<ul>
<li><a href="../csharp/async" data-linktype="relative-path">Asynchronous programming in C#</a></li>
<li><a href="../csharp/programming-guide/concepts/async/index" data-linktype="relative-path">Asynchronous programming with async and await (C#)</a></li>
<li><a href="../fsharp/tutorials/asynchronous-and-concurrent-programming/async" data-linktype="relative-path">Async Programming in F#</a></li>
<li><a href="../visual-basic/programming-guide/concepts/async/index" data-linktype="relative-path">Asynchronous Programming with Async and Await (Visual Basic)</a></li>
</ul>

						<!-- </content> -->

						</main>

						<!-- feedback section -->



<section class="feedback-section" data-bi-name="feedback-section">
	<h2 id="feedback">Feedback</h2>

	<div class="alert choose-feedback-type">
		<p id="send-feedback-about">Send feedback about:</p>

		<div class="choose-feedback-buttons">
			<a class="button feedback-type-product has-margin-bottom-small" aria-describedby="send-feedback-about" href="https://developercommunity.visualstudio.com/spaces/61/index.html" data-bi-name="product-feedback">
				<span>This product</span>
				<span class="icon docon docon-navigate-external" aria-hidden="true"></span>
			</a>

			<div class="field has-addons is-inline-flex has-margin-bottom-small">
				<div class="control has-margin-top-none has-margin-bottom-none">
					<button class="button feedback-sign-in-button has-text-wrap" aria-describedby="send-feedback-about" data-bi-name="feedback-sign-in">
						<span class="icon docon docon-brand-github" aria-hidden="true"></span>
						<span>This page</span>
					</button>
				</div>
				<div class="control dropdown has-caret has-margin-top-none has-margin-bottom-none" auto-align>
					<button class="button dropdown-trigger is-full-height" aria-describedby="send-feedback-about" aria-haspopup="true" aria-expanded="false" aria-controls="fbm0" aria-label="Additional feedback options" data-bi-name="documentation-feedback-menu">
						<span class="icon docon docon-chevron-down-light" aria-hidden="true"></span>
					</button>
					<div id="fbm0" class="dropdown-menu documentation-feedback-menu">
						You may also leave feedback directly on <a data-bi-name="create-issue-on-github" href="{0}">GitHub <span class="docon docon-navigate-external" aria-hidden="true"></span></a>.					</div>
				</div>
			</div>

			<div class="field has-addons is-inline-flex has-margin-bottom-small" hidden>
				<div class="control has-margin-top-none has-margin-bottom-none">
					<button class="button feedback-form-toggle" aria-describedby="send-feedback-about" aria-expanded="false" aria-controls="feedback-form"
						data-bi-name="documentation-feedback">
This page					</button>
				</div>
				<div class="control dropdown has-caret has-margin-top-none has-margin-bottom-none" auto-align>
					<button class="button dropdown-trigger" aria-describedby="send-feedback-about" aria-haspopup="true" aria-expanded="false" aria-controls="fbm1" aria-label="Additional feedback options" data-bi-name="documentation-feedback-menu">
						<span class="icon docon docon-chevron-down-light" aria-hidden="true"></span>
					</button>
					<div id="fbm1" class="dropdown-menu documentation-feedback-menu">
						You may also leave feedback directly on <a data-bi-name="create-issue-on-github" href="{0}">GitHub <span class="docon docon-navigate-external" aria-hidden="true"></span></a>.					</div>
				</div>
			</div>
		</div>
	</div>

	<form class="feedback-form" id="feedback-form" accept-charset="UTF-8" autocomplete="off" action="javascript:" hidden>
		<h3 class="feedback-form-heading current-user">
			<img class="avatar" alt="Avatar" width="36" height="36" aria-hidden="true">
			<span class="username" aria-hidden="true"></span>
			<span class="visually-hidden">Liquid error: Can't find the localized string giveDocumentationFeedback for template Conceptual.</span>
		</h3>

		<label>
			<span class="visually-hidden">Issue Title</span>
			<input class="input is-radiusless has-margin-bottom-small" name="title" type="text" placeholder="Issue Title" required pattern=".*\w.*">
		</label>
		<label>
			<span class="visually-hidden">Leave a comment</span>
			<textarea name="body" placeholder="Leave a comment" class="textarea is-radiusless" required></textarea>
		</label>

		<div class="action-container">
			<button class="button is-primary" type="submit" name="submit">Submit feedback</button>
		</div>
	</form>

	<div class="feedback-status alert is-loading" role="alert">
		<p>Loading feedback...</p>
	</div>

	<div class="feedback-tab-group tabGroup" data-tab-group-independent hidden>
		<ul role="tablist">
			<li role="presentation">
				<a href="#tabpanel-issues-open" role="tab" aria-controls="tabpanel-issues-open" data-tab="issues-open" aria-label="Open Issues"></a>
			</li>
			<li role="presentation">
				<a href="#tabpanel-issues-closed" role="tab" aria-controls="tabpanel-issues-closed" data-tab="issues-closed"
				 aria-label="Closed Issues"></a>
			</li>
		</ul>
		<section id="tabpanel-issues-open" role="tabpanel" data-tab="issues-open">
			<div class="no-issues-placeholder">There are no open issues</div>
			<ul class="github-issues-list" aria-label="Open Issues"></ul>
		</section>
		<section id="tabpanel-issues-closed" role="tabpanel" data-tab="issues-closed">
			<div class="no-issues-placeholder">There are no closed issues</div>
			<ul class="github-issues-list" aria-label="Closed Issues"></ul>
		</section>
	</div>
	<div class="action-container">
		<a class="view-on-github" href="https://github.com/dotnet/docs/issues" data-bi-name="view-on-github"
		 hidden>
			<span class="docon docon-brand-github" aria-hidden="true"></span>
			<span>View on GitHub</span>
			<span class="docon docon-navigate-external" aria-hidden="true"></span>
		</a>
	</div>
</section>
						<!-- end feedback section -->

						<div class="footerContainer is-visible-interactive has-default-focus ">
<footer id="footer-interactive" data-bi-name="footer" class="footer-layout">

    <a data-mscc-ic="false" class="locale-selector-link" href="#" data-bi-name="select-locale"><span class="icon docon docon-world is-size-4 has-margin-right-small"></span><span class="local-selector-link-text"></span></a>

    <ul class="links" data-bi-name="footerlinks">
		<li><a data-mscc-ic="false" href="https://docs.microsoft.com/previous-versions/" data-bi-name="archivelink">Previous Version Docs</a></li>
		<li><a data-mscc-ic="false" href="https://docs.microsoft.com/teamblog" data-bi-name="bloglink">Blog</a></li>
		<li><a data-mscc-ic="false" href="https://docs.microsoft.com/contribute" data-bi-name="contributorGuide">Contribute</a></li>
			<li><a data-mscc-ic="false" href="https://go.microsoft.com/fwlink/?LinkId=521839" data-bi-name="privacy">Privacy &amp; Cookies</a></li>
		<li><a data-mscc-ic="false" href="/en-us/legal/termsofuse" data-bi-name="termsofuse">Terms of Use</a></li>
		<li><a data-mscc-ic="false" href="https://aka.ms/sitefeedback" data-bi-name="feedback">Site Feedback</a></li>
		<li><a data-mscc-ic="false" href="https://www.microsoft.com/en-us/legal/intellectualproperty/Trademarks/EN-US.aspx" data-bi-name="trademarks">Trademarks</a></li>
    </ul>
</footer>
						</div>
					</div>

					<!--end of div.columns -->

				</div>

			<!--end of .primary-holder -->
			</section>

				<div id="left-container" class="left-container column is-one-third-tablet is-one-quarter-desktop">
					<nav class="sidebar" id="sidebar" data-bi-name="left toc" role="navigation" aria-label="Main Navigation">
						<button class="sidebar-header has-inner-focus" type="button" aria-label="Close" data-bi-name="contents-collapse">
							<span>Contents</span>
							<span class="docon docon-navigate-close" aria-hidden="true"></span>
						</button>
						<div id="sidebarContent">
							<div class="filterHolder">
							</div>
							<nav class="toc"></nav>
							<div class="pdf-download-holder"></div>
						</div>
					</nav>
				</div>

			<aside id="interactive-container" class="interactive-container is-visible-interactive column has-body-background-dark ">
			</aside>
		</div>

		<!--end of .mainContainer -->
	</div>

	<div id="openFeedbackContainer" class="openfeedback-container"></div>

	<div class="footerContainer has-default-focus is-hidden-interactive ">
<footer id="footer" data-bi-name="footer" class="footer-layout uhf-container has-padding" role="contentinfo">

    <a data-mscc-ic="false" class="locale-selector-link" href="#" data-bi-name="select-locale"><span class="icon docon docon-world is-size-4 has-margin-right-small"></span><span class="local-selector-link-text"></span></a>

    <ul class="links" data-bi-name="footerlinks">
		<li><a data-mscc-ic="false" href="https://docs.microsoft.com/previous-versions/" data-bi-name="archivelink">Previous Version Docs</a></li>
		<li><a data-mscc-ic="false" href="https://docs.microsoft.com/teamblog" data-bi-name="bloglink">Blog</a></li>
		<li><a data-mscc-ic="false" href="https://docs.microsoft.com/contribute" data-bi-name="contributorGuide">Contribute</a></li>
			<li><a data-mscc-ic="false" href="https://go.microsoft.com/fwlink/?LinkId=521839" data-bi-name="privacy">Privacy &amp; Cookies</a></li>
		<li><a data-mscc-ic="false" href="/en-us/legal/termsofuse" data-bi-name="termsofuse">Terms of Use</a></li>
		<li><a data-mscc-ic="false" href="https://aka.ms/sitefeedback" data-bi-name="feedback">Site Feedback</a></li>
		<li><a data-mscc-ic="false" href="https://www.microsoft.com/en-us/legal/intellectualproperty/Trademarks/EN-US.aspx" data-bi-name="trademarks">Trademarks</a></li>
    </ul>
</footer>
	</div>

	<div id="action-panel" role="region" aria-label="Action Panel" class="action-panel has-default-focus" tabindex="-1"></div>
</body>
</html>

